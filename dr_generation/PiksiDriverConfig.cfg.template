#!/usr/bin/env python

# This file was generated by piksi_ros/src/generate_dynamic_reconfigure_config.py
# from template piksi_ros/dr_generation/PiksiDriverConfig.cfg.template
# Please edit that template and regenerate this file instead of editing directly.

PACKAGE='piksi_ros'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

{{root_group}} = ParameterGenerator()

# TODO Non-hardware settings
#driver = {{root_group}}.add_group('driver')
#driver.add('rtk_fix_timeout', int_t, 0, "RTK fix timeout (ms)", default=0, min=0, max=10000)
#driver.add('spp_fix_timeout', int_t, 0, "SPP fix timeout (ms)", default=0, min=0, max=10000)
#driver.add('rtk_h_accuracy', double_t, 0, "RTK horizontal covariance", default=0, min=0, max=10000)
#driver.add('rtk_v_accuracy', double_t, 0, "RTK vertical covariance", default=0, min=0, max=10000)

piksi = {{root_group}}.add_group('piksi')

{% for enum in enums %}
{{ enum.name }} = {{root_group}}.enum([
{% for field in enum.fields %}
{{root_group}}.const("{{ field.name }}",      {{field.type}}, {{field.index}}, "{{field.desc}}"),
{% endfor %}],
"{{ enum.desc }}")
{% endfor %}


{% for group in groups %}
{{ group.name }} = piksi.add_group("{{ group.name }}")
{% endfor %}

{% for param in params %}
{{param.group}}.add("piksi__{{param.group}}__{{param.name}}",            {{param.type}},   {{param.level}}, "{{ param.desc}}", default={{ param.default}}{% if param.enum_name %}, edit_method={{param.enum_name}}{% endif %}{% if param.max is defined %}, max={{param.max}}{% endif %}{% if param.min is defined %}, min={{param.min}}{% endif %})
{% endfor %}

exit(gen.generate(PACKAGE, "piksi_driver", "PiksiDriver"))
