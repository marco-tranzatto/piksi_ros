#!/usr/bin/env python

PACKAGE='piksi_ros'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

piksi = gen.add_group('piksi')


antenna_selection_enum = gen.enum([

gen.const("Auto",      int_t, 0, "Auto"),

gen.const("Patch",      int_t, 1, "Patch"),

gen.const("External",      int_t, 2, "External"),

gen.const("External__no_bias_",      int_t, 3, "External (no bias)"),
],
"An enum for antenna_selection")

dgnss_solution_mode_enum = gen.enum([

gen.const("Low_Latency",      int_t, 0, "Low Latency"),

gen.const("Time_Matched",      int_t, 1, "Time Matched"),
],
"An enum for dgnss_solution_mode")

mode_enum = gen.enum([

gen.const("SBP",      int_t, 0, "SBP"),

gen.const("NMEA",      int_t, 1, "NMEA"),

gen.const("RTCM",      int_t, 2, "RTCM"),
],
"An enum for mode")

mode_enum = gen.enum([

gen.const("SBP",      int_t, 0, "SBP"),

gen.const("NMEA",      int_t, 1, "NMEA"),

gen.const("RTCM",      int_t, 2, "RTCM"),
],
"An enum for mode")

mode_enum = gen.enum([

gen.const("SBP",      int_t, 0, "SBP"),

gen.const("NMEA",      int_t, 1, "NMEA"),

gen.const("RTCM",      int_t, 2, "RTCM"),
],
"An enum for mode")

edge_trigger_enum = gen.enum([

gen.const("None",      int_t, 0, "None"),

gen.const("Rising",      int_t, 1, "Rising"),

gen.const("Falling",      int_t, 2, "Falling"),

gen.const("Both",      int_t, 3, "Both"),
],
"An enum for edge_trigger")




surveyed_position = piksi.add_group("surveyed_position")

frontend = piksi.add_group("frontend")

sbp = piksi.add_group("sbp")

simulator = piksi.add_group("simulator")

solution = piksi.add_group("solution")

system_monitor = piksi.add_group("system_monitor")

telemetry_radio = piksi.add_group("telemetry_radio")

uart_ftdi = piksi.add_group("uart_ftdi")

uart_uarta = piksi.add_group("uart_uarta")

uart_uartb = piksi.add_group("uart_uartb")

ext_events = piksi.add_group("ext_events")

nmea = piksi.add_group("nmea")

pps = piksi.add_group("pps")



surveyed_position.add("piksi__surveyed_position__broadcast",            bool_t,   0, "Broadcast surveyed base station location", default=False)

surveyed_position.add("piksi__surveyed_position__surveyed_lat",            double_t,   0, "Surveyed latitude of the Piksi's antenna", default=0, max=90.0, min=-90.0)

surveyed_position.add("piksi__surveyed_position__surveyed_lon",            double_t,   0, "Surveyed longitude of the Piksi's antenna", default=0, max=180.0, min=-180.0)

surveyed_position.add("piksi__surveyed_position__surveyed_alt",            double_t,   0, "Surveyed altitude of the Piksi's antenna", default=0, max=20000.0, min=-100.0)

frontend.add("piksi__frontend__antenna_selection",            int_t,   0, "Determines which antenna to use.", default=0, edit_method=antenna_selection_enum, max=3, min=0)

sbp.add("piksi__sbp__obs_msg_max_size",            int_t,   0, "Determines the maximum message length for raw observation sbp messages.", default=102, max=255, min=1)

simulator.add("piksi__simulator__enabled",            bool_t,   0, "Toggles the Piksi internal simulator on and off", default=False)

simulator.add("piksi__simulator__base_ecef_x",            double_t,   0, "Simulated base station position", default=0.0, max=10000000, min=-10000000)

simulator.add("piksi__simulator__base_ecef_y",            double_t,   0, "Simulated base station position", default=0.0, max=10000000, min=-10000000)

simulator.add("piksi__simulator__base_ecef_z",            double_t,   0, "Simulated base station position", default=0.0, max=10000000, min=-10000000)

simulator.add("piksi__simulator__speed",            double_t,   0, "Simulated tangential speed of Piksi", default=4, max=1000, min=0)

simulator.add("piksi__simulator__radius",            double_t,   0, "Radius of the circle around which the simulated Piksi will move", default=100, max=42000, min=0)

simulator.add("piksi__simulator__pos_sigma",            double_t,   0, "Standard deviation of simulated single point position", default=2, max=90.0, min=0)

simulator.add("piksi__simulator__speed_sigma",            double_t,   0, "Standard deviation of noise addition to simulated tangential speed.", default=0.02, max=90.0, min=0)

simulator.add("piksi__simulator__cn0_sigma",            double_t,   0, "Standard deviation of noise added to the simulated signal to noise ratio", default=0.1, max=90.0, min=0)

simulator.add("piksi__simulator__pseudorange_sigma",            double_t,   0, "Standard deviation of noise added to the simulated pseudo range", default=16, max=90.0, min=0)

simulator.add("piksi__simulator__phase_sigma",            double_t,   0, "Standard deviation of noise added to the simulated carrier phase", default=0.0009, max=90.0, min=0)

simulator.add("piksi__simulator__num_sats",            int_t,   0, "The number of satellites for the simulator.", default=9, max=20, min=0)

solution.add("piksi__solution__soln_freq",            int_t,   0, "The rate at which a solution is generated internally to the Piksi.", default=10, max=20, min=0)

solution.add("piksi__solution__output_every_n_obs",            int_t,   0, "Integer divisor of solution frequency for which the observations will be output.", default=2, max=20, min=1)

solution.add("piksi__solution__dgnss_solution_mode",            int_t,   0, "Determines the type of RTK solution which will be output.", default=0, edit_method=dgnss_solution_mode_enum, max=1, min=0)

solution.add("piksi__solution__known_baseline_n",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", default=0, max=10000, min=-10000)

solution.add("piksi__solution__known_baseline_e",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", default=0, max=10000, min=-10000)

solution.add("piksi__solution__known_baseline_d",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", default=0, max=10000, min=-10000)

solution.add("piksi__solution__elevation_mask",            double_t,   0, "SPP / RTK elevation mask", default=5, max=90.0, min=0.0)

system_monitor.add("piksi__system_monitor__heartbeat_period_milliseconds",            int_t,   0, "Period for sending the SBP_HEARTBEAT messages", default=0, max=10000, min=1000)

system_monitor.add("piksi__system_monitor__watchdog",            bool_t,   0, "Enable hardware watchdog timer to reset the Piksi if it locks up for any reason.", default=True)

telemetry_radio.add("piksi__telemetry_radio__configuration_string",            str_t,   0, "Configuration string to send radio modem over UART when detected", default='')

uart_ftdi.add("piksi__uart_ftdi__mode",            int_t,   0, "Configure mode for USB serial port on Piksi", default=0, edit_method=mode_enum, max=2, min=0)

uart_ftdi.add("piksi__uart_ftdi__sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on the UART for the USB port on Piksi", default=65535, max=65535, min=0)

uart_ftdi.add("piksi__uart_ftdi__baudrate",            int_t,   0, "The baudrate for the UART for the USB port on Piksi", default=1000000, max=1000000, min=0)

uart_uarta.add("piksi__uart_uarta__mode",            int_t,   0, "Configure mode for UART", default=0, edit_method=mode_enum, max=2, min=0)

uart_uarta.add("piksi__uart_uarta__sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on UART", default=64, max=65535, min=0)

uart_uarta.add("piksi__uart_uarta__configure_telemetry_radio_on_boot",            bool_t,   0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", default=True)

uart_uarta.add("piksi__uart_uarta__baudrate",            int_t,   0, "The baudrate for the UART", default=57600, max=1000000, min=0)

uart_uartb.add("piksi__uart_uartb__mode",            int_t,   0, "Configure mode for UART", default=0, edit_method=mode_enum, max=2, min=0)

uart_uartb.add("piksi__uart_uartb__sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on UART", default=65280, max=65535, min=0)

uart_uartb.add("piksi__uart_uartb__configure_telemetry_radio_on_boot",            bool_t,   0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", default=True)

uart_uartb.add("piksi__uart_uartb__baudrate",            int_t,   0, "The baudrate for the uart", default=115200, max=1000000, min=0)

ext_events.add("piksi__ext_events__edge_trigger",            int_t,   0, "Select DEBUG0 edges to trigger timestamped event capture.", default=0, edit_method=edge_trigger_enum, max=3, min=0)

nmea.add("piksi__nmea__gpgsv_msg_rate",            int_t,   0, "Number of ticks between GPGSV NMEA messages being sent.", default=10, max=20, min=0)

nmea.add("piksi__nmea__gprmc_msg_rate",            int_t,   0, "Number of ticks between GPRMC NMEA messages being sent.", default=10, max=20, min=0)

nmea.add("piksi__nmea__gpvtg_msg_rate",            int_t,   0, "Number of ticks between GPVTG NMEA messages being sent.", default=10, max=20, min=0)

nmea.add("piksi__nmea__gpgll_msg_rate",            int_t,   0, "Number of ticks between GPGLL NMEA messages being sent.", default=10, max=20, min=0)

pps.add("piksi__pps__width",            int_t,   0, "Number of microseconds the PPS will remain high (1-999999).", default=200000, max=2147483647, min=-2147483648)


exit(gen.generate(PACKAGE, "piksi_driver", "PiksiDriver"))