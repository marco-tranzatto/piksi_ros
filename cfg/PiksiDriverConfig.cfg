#!/usr/bin/env python

PACKAGE='piksi_ros'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


antenna_selection_enum = gen.enum([

gen.const("Auto",      str_t, "Auto", "Auto"),

gen.const("Patch",      str_t, "Patch", "Patch"),

gen.const("External",      str_t, "External", "External"),

gen.const("External (no bias)",      str_t, "External (no bias)", "External (no bias)"),
],
"An enum for antenna_selection")

dgnss_solution_mode_enum = gen.enum([

gen.const("Low Latency",      str_t, "Low Latency", "Low Latency"),

gen.const("Time Matched",      str_t, "Time Matched", "Time Matched"),
],
"An enum for dgnss_solution_mode")

mode_enum = gen.enum([

gen.const("SBP",      str_t, "SBP", "SBP"),

gen.const("NMEA",      str_t, "NMEA", "NMEA"),

gen.const("RTCM",      str_t, "RTCM", "RTCM"),
],
"An enum for mode")

mode_enum = gen.enum([

gen.const("SBP",      str_t, "SBP", "SBP"),

gen.const("NMEA",      str_t, "NMEA", "NMEA"),

gen.const("RTCM",      str_t, "RTCM", "RTCM"),
],
"An enum for mode")

mode_enum = gen.enum([

gen.const("SBP",      str_t, "SBP", "SBP"),

gen.const("NMEA",      str_t, "NMEA", "NMEA"),

gen.const("RTCM",      str_t, "RTCM", "RTCM"),
],
"An enum for mode")

edge_trigger_enum = gen.enum([

gen.const("None",      str_t, "None", "None"),

gen.const("Rising",      str_t, "Rising", "Rising"),

gen.const("Falling",      str_t, "Falling", "Falling"),

gen.const("Both",      str_t, "Both", "Both"),
],
"An enum for edge_trigger")




surveyed_position = gen.add_group("surveyed_position")

frontend = gen.add_group("frontend")

sbp = gen.add_group("sbp")

simulator = gen.add_group("simulator")

solution = gen.add_group("solution")

system_monitor = gen.add_group("system_monitor")

telemetry_radio = gen.add_group("telemetry_radio")

uart_ftdi = gen.add_group("uart_ftdi")

uart_uarta = gen.add_group("uart_uarta")

uart_uartb = gen.add_group("uart_uartb")

ext_events = gen.add_group("ext_events")

nmea = gen.add_group("nmea")

pps = gen.add_group("pps")



surveyed_position.add("broadcast",            bool_t,   0, "Broadcast surveyed base station location", False)

surveyed_position.add("surveyed_lat",            double_t,   0, "Surveyed latitude of the Piksi's antenna", 0)

surveyed_position.add("surveyed_lon",            double_t,   0, "Surveyed longitude of the Piksi's antenna", 0)

surveyed_position.add("surveyed_alt",            double_t,   0, "Surveyed altitude of the Piksi's antenna", 0)

frontend.add("antenna_selection",            str_t,   0, "Determines which antenna to use.", 'Auto', edit_method=antenna_selection_enum)

sbp.add("obs_msg_max_size",            int_t,   0, "Determines the maximum message length for raw observation sbp messages.", 102)

simulator.add("enabled",            bool_t,   0, "Toggles the Piksi internal simulator on and off", False)

simulator.add("base_ecef_x",            double_t,   0, "Simulated base station position", 0.0)

simulator.add("base_ecef_y",            double_t,   0, "Simulated base station position", 0.0)

simulator.add("base_ecef_z",            double_t,   0, "Simulated base station position", 0.0)

simulator.add("speed",            double_t,   0, "Simulated tangential speed of Piksi", 4)

simulator.add("radius",            double_t,   0, "Radius of the circle around which the simulated Piksi will move", 100)

simulator.add("pos_sigma",            double_t,   0, "Standard deviation of simulated single point position", 2)

simulator.add("speed_sigma",            double_t,   0, "Standard deviation of noise addition to simulated tangential speed.", 0.02)

simulator.add("cn0_sigma",            double_t,   0, "Standard deviation of noise added to the simulated signal to noise ratio", 0.1)

simulator.add("pseudorange_sigma",            double_t,   0, "Standard deviation of noise added to the simulated pseudo range", 16)

simulator.add("phase_sigma",            double_t,   0, "Standard deviation of noise added to the simulated carrier phase", 0.0009)

simulator.add("num_sats",            int_t,   0, "The number of satellites for the simulator.", 9)

solution.add("soln_freq",            int_t,   0, "The rate at which a solution is generated internally to the Piksi.", 10)

solution.add("output_every_n_obs",            int_t,   0, "Integer divisor of solution frequency for which the observations will be output.", 2)

solution.add("dgnss_solution_mode",            str_t,   0, "Determines the type of RTK solution which will be output.", '', edit_method=dgnss_solution_mode_enum)

solution.add("known_baseline_n",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", 0)

solution.add("known_baseline_e",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", 0)

solution.add("known_baseline_d",            double_t,   0, "Determines the baseline vector for the \"init known baseline\" feature.", 0)

solution.add("elevation_mask",            double_t,   0, "SPP / RTK elevation mask", 5)

system_monitor.add("heartbeat_period_milliseconds",            int_t,   0, "Period for sending the SBP_HEARTBEAT messages", 0)

system_monitor.add("watchdog",            bool_t,   0, "Enable hardware watchdog timer to reset the Piksi if it locks up for any reason.", True)

telemetry_radio.add("configuration_string",            str_t,   0, "Configuration string to send radio modem over UART when detected", '')

uart_ftdi.add("mode",            str_t,   0, "Configure mode for USB serial port on Piksi", 'SBP', edit_method=mode_enum)

uart_ftdi.add("sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on the UART for the USB port on Piksi", 65535)

uart_ftdi.add("baudrate",            int_t,   0, "The baudrate for the UART for the USB port on Piksi", 1000000)

uart_uarta.add("mode",            str_t,   0, "Configure mode for UART", 'SBP', edit_method=mode_enum)

uart_uarta.add("sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on UART", 64)

uart_uarta.add("configure_telemetry_radio_on_boot",            bool_t,   0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", True)

uart_uarta.add("baudrate",            int_t,   0, "The baudrate for the UART", 57600)

uart_uartb.add("mode",            str_t,   0, "Configure mode for UART", 'SBP', edit_method=mode_enum)

uart_uartb.add("sbp_message_mask",            int_t,   0, "Configure the message mask for SBP messages on UART", 65280)

uart_uartb.add("configure_telemetry_radio_on_boot",            bool_t,   0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", True)

uart_uartb.add("baudrate",            int_t,   0, "The baudrate for the uart", 115200)

ext_events.add("edge_trigger",            str_t,   0, "Select DEBUG0 edges to trigger timestamped event capture.", 'None', edit_method=edge_trigger_enum)

nmea.add("gpgsv_msg_rate",            int_t,   0, "Number of ticks between GPGSV NMEA messages being sent.", 10)

nmea.add("gprmc_msg_rate",            int_t,   0, "Number of ticks between GPRMC NMEA messages being sent.", 10)

nmea.add("gpvtg_msg_rate",            int_t,   0, "Number of ticks between GPVTG NMEA messages being sent.", 10)

nmea.add("gpgll_msg_rate",            int_t,   0, "Number of ticks between GPGLL NMEA messages being sent.", 10)

pps.add("width",            int_t,   0, "Number of microseconds the PPS will remain high (1-999999).", 200000)


exit(gen.generate(PACKAGE, "piksi_driver", "PiksiDriver"))